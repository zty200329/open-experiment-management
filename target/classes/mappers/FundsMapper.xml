<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.swpu.uchain.openexperiment.mapper.FundsMapper">
  <resultMap id="BaseResultMap" type="com.swpu.uchain.openexperiment.domain.Funds">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="amount" jdbcType="INTEGER" property="amount" />
    <result column="use" jdbcType="VARCHAR" property="use" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="applicant_id" jdbcType="BIGINT" property="applicantId" />
    <result column="project_group_id" jdbcType="BIGINT" property="projectGroupId" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from funds
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.swpu.uchain.openexperiment.domain.Funds">
    insert into funds (id, amount, `use`, 
      `type`, applicant_id, project_group_id, 
      `status`, create_time, update_time
      )
    values (#{id,jdbcType=BIGINT}, #{amount,jdbcType=INTEGER}, #{use,jdbcType=VARCHAR}, 
      #{type,jdbcType=INTEGER}, #{applicantId,jdbcType=BIGINT}, #{projectGroupId,jdbcType=BIGINT}, 
      #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="multiInsert">
    insert into funds
        (
         amount,
         `use`,
         `type`,
         project_group_id,
         `status`,
         create_time,
         update_time
        )
    values
        <foreach collection="list" item="fund" separator=",">
          (
                #{fund.amount,jdbcType=INTEGER},
                #{fund.use,jdbcType=VARCHAR},
                #{fund.projectGroupId,jdbcType=BIGINT},
                #{fund.type,jdbcType=INTEGER},
                <!--默认为2，可扩展-->
                2,
                #{fund.createTime,jdbcType=TIMESTAMP},
                #{fund.updateTime,jdbcType=TIMESTAMP}
          )
        </foreach>
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.swpu.uchain.openexperiment.domain.Funds">
    update funds
    set amount = #{amount,jdbcType=INTEGER},
      `use` = #{use,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=INTEGER},
      applicant_id = #{applicantId,jdbcType=BIGINT},
      project_group_id = #{projectGroupId,jdbcType=BIGINT},
      `status` = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateProjectFundsStatus">
    update funds
    set `status` = #{param2}
    where project_group_id = #{param1}
  </update>
    <update id="updateProjectListFunds">
        UPDATE project_group
        SET apply_funds = #{supportAmount}
        where project_group.id in
        <foreach collection="list" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </update>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select id, amount, `use`, `type`, applicant_id, project_group_id, `status`, create_time, 
    update_time
    from funds
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, amount, `use`, `type`, applicant_id, project_group_id, `status`, create_time, 
    update_time
    from funds
  </select>
  <select id="selectByProjectGroupId" resultMap="BaseResultMap">
    select id, amount, `use`, `type`, applicant_id,
    project_group_id, `status`, create_time, update_time
    from funds
    where project_group_id = #{projectGroupId}
  </select>
</mapper>